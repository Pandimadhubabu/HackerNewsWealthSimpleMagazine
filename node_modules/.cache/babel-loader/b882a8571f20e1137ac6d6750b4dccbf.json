{"ast":null,"code":"var _ = require('underscore');\n\nvar clean = require('./clean');\n\nmodule.exports = MetadataFields;\n/**\n * @ctor MetadataFields (chainable)\n * Returns basic metadata fields whose values will be filled in by the parser\n * after url request response. Most of these are Open Graph Protocol (og:) so\n * far: http://ogp.me/\n *\n * TODO: protocols `sailthru`, `parseley`, `twitter`, `dcterms`\n */\n\nfunction MetadataFields(options) {\n  this.options = options || {};\n  this.fields = {\n    'url': '',\n    'canonical': '',\n    'title': '',\n    'image': '',\n    'author': '',\n    'description': '',\n    'keywords': '',\n    'source': '',\n    'og:url': '',\n    'og:locale': '',\n    'og:locale:alternate': '',\n    'og:title': '',\n    'og:type': '',\n    'og:description': '',\n    'og:determiner': '',\n    'og:site_name': '',\n    'og:image': '',\n    'og:image:secure_url': '',\n    'og:image:type': '',\n    'og:image:width': '',\n    'og:image:height': '',\n    'price': '',\n    'priceCurrency': '',\n    'availability': ''\n  };\n  return this;\n}\n/**\n * @method `configureType` (chainable)\n * @param {string} `type`\n * Returns properties belonging to global types that are grouped into\n * verticals and generally agreed upon. In the following example, \"music.song\"\n * would be the type passed as an argument into this method. This method\n * currently only supports type `article`, however.\n * <meta property=\"og:type\" content=\"music.song\" />\n *\n * TODO: music, audio, video\n */\n\n\nMetadataFields.prototype.configureType = function (type) {\n  if (!type || typeof type !== 'string') return this;\n  var fieldsByType = {\n    'article': {\n      'article:published_time': '',\n      'article:modified_time': '',\n      'article:expiration_time': '',\n      'article:author': '',\n      'article:section': '',\n      'article:tag': '',\n      'og:article:published_time': '',\n      'og:article:modified_time': '',\n      'og:article:expiration_time': '',\n      'og:article:author': '',\n      'og:article:section': '',\n      'og:article:tag': ''\n    }\n  };\n  if (fieldsByType[type]) _.extend(this.fields, fieldsByType[type]);\n  return this;\n};\n/**\n * @method `lockKeys` (chainable)\n * Freeze metadata keys via Object.seal\n */\n\n\nMetadataFields.prototype.lockKeys = function () {\n  Object.seal(this.fields);\n  return this;\n};\n/**\n * @method `set` (chainable)\n * @param obj must be in the form of {key: value}\n */\n\n\nMetadataFields.prototype.set = function (obj) {\n  if (obj) _.extend(this.fields, obj);\n  return this;\n};\n/**\n* @method `get`\n* @param key {string}\n*/\n\n\nMetadataFields.prototype.get = function (key) {\n  return this.fields[key];\n};\n/**\n * @method `clean` (chainable)\n */\n\n\nMetadataFields.prototype.clean = function () {\n  var self = this;\n  Object.keys(this.fields).forEach(function (key) {\n    self.fields[key] = clean(key, self.fields[key], self.options);\n  });\n  return this;\n};\n/**\n * @method `finalize`\n * optionally encode and then return all fields\n */\n\n\nMetadataFields.prototype.finalize = function () {\n  var self = this;\n\n  if (this.options.encode && typeof this.options.encode === 'function') {\n    Object.keys(this.fields).forEach(function (key) {\n      self.fields[key] = self.options.encode(self.fields[key]);\n    });\n  }\n\n  return this.fields;\n};","map":null,"metadata":{},"sourceType":"script"}